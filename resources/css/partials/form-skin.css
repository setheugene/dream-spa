/*
 * Most of the layout styling is being controlled through editing
 * the actual markup output of gravity forms. This is happening in
 * /lib/custom-gravity-forms. Further details are in that file
 */
.gform_wrapper.gravity-theme.form-skin_wrapper {
  .gform_title {
    @apply hdg-3;
  }

  .gform_description {
    @apply block mb-8;
  }
}

.gform_wrapper.gravity-theme .form-skin {
  /*
  * --form-spacing-cols will effect both the grid column spacing and spacing between complex fields
  * --form-spacing-rows will effect both the grid row spacing and spacing between complex fields
  * both variables are currently set to the same defaults as gravity forms and can be changed as neccessary or redefined where neccessary for specific classes and selectors
  */
  --form-spacing-cols: 2%;
  --form-spacing-rows: theme('spacing.5');
  --form-spacing-cols-negative: calc( var(--form-spacing-cols) * -1 );
  --form-spacing-row-negative: calc( var(--form-spacing-rows) * -1 );

  input[type="email"],
  input[type="tel"],
  input[type="text"],
  input[type="password"],
  input[type="number"],
  input[type="file"],
  input[type="url"],
  select,
  textarea {
    display: block;
    width: 100%;
    @apply px-4 py-3 duration-150 border rounded-sm bg-brand-off-white border-brand-storm paragraph-default;
    color: theme(colors.form.field-text);
    &:hover:not(:focus) {

    }

    &:focus {
      outline: none;
      background-color: theme(colors.form.active-bg);
      border: 1px solid theme(colors.brand.teal);
    }

    &::placeholder {
      @apply text-brand-gray;
    }
  }

  /*
   * unset all default select styles
   */
  select {
    appearance: none;

    &.placeholder-selected {
      @apply text-brand-gray;
    }
  }

  select::-ms-expand {
    display: none;
  }

  .ginput_container_select {
    position: relative;
  }

  .select-dropdown-arrow {
    position: absolute;
    top: 50%;
    right: 1em;
    transform: translateY(-50%);
    font-size: 1em;
    z-index: 1;
  }

  .gfield_error {
    input[type="email"],
    input[type="tel"],
    input[type="text"],
    input[type="password"],
    input[type="number"],
    input[type="file"],
    input[type="url"],
    select,
    textarea {
      display: block;
      width: 100%;
      @apply px-4 py-3 duration-150 border rounded-sm border-form-error paragraph-default;
      background-color: rgba(168, 2, 42, 0.05);

      &:focus {
        outline: none;
        background-color: theme(colors.form.active-bg);
        border: 1px solid theme(colors.brand.teal);
      }

      &::placeholder {
        @apply text-brand-gray;
      }


    }

    /*
     * unset all default select styles
     */
    select {
      appearance: none;

      &.placeholder-selected {
        @apply text-brand-gray;
      }
    }
  }
  .gfield {
    textarea,
    textarea.large {
      height: 128px;
      resize: none;
      @apply py-3;
    }
  }

  .gfield_label {
    @apply block paragraph-small text-form-placeholder;
    color: theme(colors.brand.navy);
    margin-bottom: 8px;
    font-weight: 600;
  }

  .gfield_required_asterisk {
    color: theme(colors.brand.teal);
  }

  .gfield_description {
    @apply text-sm mt-1.5 text-form-description;
  }

  .gfield_checkbox {
    .gchoice:not(:last-child) {
      @apply mb-1;
    }
  }
  .ll-file-upload {
    height: 48px; /* match height of your inputs */
    line-height: 48px; /* match height of your inputs */
    width: 100%;
    @apply relative flex pointer-events-none;
    border: 1px solid theme(colors.brand.gray);
    padding-left: 107px;


    span {
      overflow: hidden;
      white-space: nowrap;
      @apply flex-grow mx-3; /* Set margin to match your inputs padding */
    }

    &::after { /* can be another span as well, just need to edit the original markup */
    content: "Browse";
    @apply flex-shrink-0 block h-full px-3 border-r;
    text-transform: uppercase;
    margin-right: auto;
    transition: all .2s;
    position: absolute;
    left: 0;
    background-color: theme(colors.brand.teal);
    color: theme(colors.white);
    }
  }

  input[type="file"] {
    @apply absolute inset-0 cursor-pointer;
    opacity: 0;
    padding-left: 107px;


    &::file-selector-button {
      @apply cursor-pointer;
    }

    &::-webkit-file-upload-button {
      @apply cursor-pointer;
    }

    &:hover,
    &:focus {
      ~ .ll-file-upload {

        &::after {
          background-color: theme(colors.brand.off-white);
          color: theme(colors.brand.teal);
        }
      }
    }
  }
  /* .ll_gfield_type_consent {
    .gfield_label_before_complex {
      display: none;
    }
  } */
  .ginput_container_consent label.gfield_consent_label {
    padding-left: 32px;
    display: block;

    svg {
      position: absolute;
      height: 20px;
      width: 20px;
      left: 0;
      top: 2px;
    }

    svg.checkbox-checked {
      display: none;
    }

    &::before,
    &::after {
      display: none !important;
    }
  }
  .ginput_container.ginput_container_consent input:checked ~ label.gfield_consent_label {
    svg.checkbox-checked {
      display: block;
    }
    svg.checkbox-unchecked {
      display: none;
    }
  }
  /**
   * extend visuallyhidden rather than display: none to hide the input to
   * allow the input to still be accessible by screen readers and keyboards
   * Note: Changes to checkbox input and label will effect .gfield_consent_label
   * from the consent field
   */
  .ginput_container_checkbox input[type="checkbox"] {
    @apply sr-only;

    ~ label {
      @apply select-none;
      position: relative;
      padding-left: 2rem;

      &::before {
        content: '';
        position: absolute;
        left: 0;
        top: 0;
        background-repeat: no-repeat;
        background-image: url('../../assets/img/checkbox-unchecked.svg');
        background-size: 20px 20px;
        height: 20px;
        width: 20px;
      }

      /* .icon {
        @apply absolute top-0 left-0;
      }

      .icon-checkbox-checked {
        @apply hidden;
      } */
    }
    /**
     * give the focused inputs label a style so keyboard users can tell
     * which radio / checkbox is focused. Accessibility win
     */
    &:focus ~ label {
    }
  }

  .ginput_container_checkbox input[type="checkbox"]:checked ~ label {
    &::after {
      content: '';
      position: absolute;
      left: 0;
      top: 0;
      background-repeat: no-repeat;
      background-image: url('../../assets/img/checkbox-checked.svg');
      background-size: 20px 20px;
      height: 20px;
      width: 20px;
    }

    /* .icon-checkbox {
      @apply hidden;
    }

    .icon-checkbox-checked {
      @apply block;
    } */
  }
  .ginput_container_radio .gfield_radio {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 12px;

    .gchoice {
      height: 49px;
    }
  }
  .ll_gfield_type_radio:not(.ll-radio-style--buttons) .ginput_container_radio input[type="radio"] {
    @apply sr-only;

    ~ label {
      @apply inline-block select-none paragraph-default;
      width: 100%;
      position: relative;
      padding: 12px 24px;
      transition: all .3s ease-in-out;
      text-align: center;
      background-color: theme(colors.brand.off-white);
      color: theme(colors.brand.gray);
      border: 1px solid theme(colors.brand.gray);
      border-radius: 2px;
      overflow: hidden;
      cursor: pointer;

      &:hover {
        background-color: theme(colors.brand.teal);
        color: theme(colors.white);
      }
    }
    /**
     * give the focused inputs label a style so keyboard users can tell
     * which radio / checkbox is focused. Accessibility win
     */
    &:focus ~ label {
    }
  }

  .ll_gfield_type_radio:not(.ll-radio-style--buttons) .ginput_container_radio input[type="radio"]:checked ~ label {
    background-color: theme(colors.brand.teal);
    color: theme(colors.white);
  }

  .ll-radio-style--buttons .gfield_radio {
    @apply flex flex-wrap items-stretch justify-start -mx-2 -mb-3;

    .gchoice {
      @apply px-2 mb-3;
    }

    .icon {
      @apply hidden;
    }
  }

  .ll-radio-style--buttons .ginput_container_radio input[type="radio"] {
    @apply sr-only;

    ~ label {
      @apply inline-block py-3.5 px-8 rounded-lg bg-form-radio-button-unchecked text-white duration-150;
    }
    /**
     * give the focused inputs label a style so keyboard users can tell
     * which radio / checkbox is focused. Accessibility win
     */
    &:focus ~ label {
    }
  }

  .ll-radio-style--buttons .ginput_container_radio input[type="radio"]:hover,
  .ll-radio-style--buttons .ginput_container_radio input[type="radio"]:checked {
    ~ label {
      @apply bg-form-radio-button-checked;
    }
  }

  .ginput_container_consent {
    input {
      @apply sr-only;
    }

    label {
      @apply relative flex items-center;
      padding-left: 84px;
      min-height: 40px;

      &::before {
        content: '';
        width: 72px;
        height: 40px;
        @apply absolute top-0 left-0 block duration-150 rounded-full bg-form-toggle-unchecked;
        box-shadow: inset 0px 0px 11px -6px rgba(0,0,0,0.75);
      }

      &::after {
        content: '';
        position: absolute;
        @apply absolute w-8 h-8 duration-150 bg-white rounded-full top-1 left-1;
        box-shadow: 2px 5.5px 5px -3px rgba(0, 0, 0, 0.2);
      }
    }

    input:checked ~ label {
      &::before {
        @apply bg-form-toggle-checked;
      }

      &::after {
        transform: translateX(100%);
      }
    }
  }

  .gform_footer {
    @apply mt-8;


  }

  .gform_fields {
    column-gap: var(--form-spacing-cols);
    row-gap: var(--form-spacing-rows);
  }

  /*
   * Extend styling ginput_complex
   * to act as rows. Make all direct children col's
   * Note: Possibly unnecessary on future versions of gravity
   * forms?
   */
  .ginput_complex {
    display: flex;
    flex-flow: row wrap;
    margin-left: calc( var(--form-spacing-cols-negative) / 2 );
    margin-right: calc( var(--form-spacing-cols-negative) / 2 );
    row-gap: var(--form-spacing-rows);

    & > span,
    div {
      flex: 1;
      padding-left: calc( var(--form-spacing-cols) / 2);
      padding-right: calc( var(--form-spacing-cols) / 2 );

      &.ginput_full {
        flex: 0 0 100%;
      }

      &.ginput_left,
      &.ginput_right {
        flex: 0 0 50%;
      }
    }
  }
}

.gform_wrapper.gravity-theme .form-skin.form-skin--lg {
  input[type="email"],
  input[type="tel"],
  input[type="text"],
  input[type="password"],
  input[type="number"],
  input[type="file"],
  input[type="url"],
  select,
  textarea {
    @apply rounded-lg;
  }
}

.gform_wrapper.gravity-theme .form-skin.form-skin--pill {
  input[type="email"],
  input[type="tel"],
  input[type="text"],
  input[type="password"],
  input[type="number"],
  input[type="file"],
  input[type="url"],
  select {
    @apply rounded-full;
  }

  textarea {
    @apply rounded-3xl;
  }
}

.screen-reader-text,
.gform_required_legend {
  @apply sr-only;
}

/* if you want to hide hidden validation field for anti spam honeypot */
.gform_validation_container,
.gform_wrapper .gform_validation_container,
body .gform_wrapper li.gform_validation_container,
body .gform_wrapper .gform_body ul.gform_fields li.gfield.gform_validation_container,
body .gform_wrapper ul.gform_fields li.gfield.gform_validation_container {
  @apply sr-only;
}
